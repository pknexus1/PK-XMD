const { cmd } = require('../command');

cmd({
    pattern: "hack",
    desc: "Playful PK-XMD themed hacking animation (for owner use only).",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, senderNumber, reply }) => {
    try {
        // Bot owner check
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) {
            return reply("‚õî Only *PK-XMD Owner* can run this command.");
        }

        const steps = [
            "üõ∞Ô∏è *[PK-XMD CYBER SUITE] INITIALIZING...*",
            "üíæ Loading stealth modules... [‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 15%",
            "üåê Connecting to *PK-XMD Secure Nodes*...",
            "üîç Scanning vulnerabilities... [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 35%",
            "üíª Bypassing multi-layer firewalls...",
            "‚öôÔ∏è Injecting *Custom PK-XMD Exploits*... [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë] 60%",
            "üì° Establishing encrypted backdoor...",
            "üõ† Deploying payload... [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë] 85%",
            "üîì **SYSTEM BREACH SUCCESSFUL!**",
            "üöÄ Exfiltrating target data packets...",
            "üì¶ Packaging data ‚Üí PK-XMD Quantum Storage...",
            "‚úÖ Operation Complete ‚Äî *PK-XMD BlackOps Protocol* Executed",
            "‚ö†Ô∏è _Simulation for entertainment purposes only_"
        ];

        for (const line of steps) {
            await conn.sendMessage(from, { text: line }, { quoted: mek });
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        // Final PK-XMD Signature
        await conn.sendMessage(from, {
            text: "‚ò£ *PK-XMD CYBER OPS ‚Äî MISSION ACCOMPLISHED* ‚ò£",
            contextInfo: {
                forwardingScore: 9999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: "120363288304618280@newsletter",
                    newsletterName: "PK-XMD Official Channel",
                    serverMessageId: 101
                }
            }
        }, { quoted: mek });

    } catch (e) {
        console.error(e);
        reply(`‚ùå *Error:* ${e.message}`);
    }
});
